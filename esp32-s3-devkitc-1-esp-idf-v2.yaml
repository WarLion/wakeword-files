substitutions:
  name: <<your device name>>
  friendly_name: <<your device name>>
  ota_password: <<your device name>>
  key_encryption: <<your device name>>
  i2s_lrclk_ws: GPIO18
  i2s_bclk_sck: GPIO17
  mic: GPIO4
  spk: GPIO5
  ledpin: GPIO9
  numleds: "4"
  vol_up: GPIO21
  vol_down: GPIO47
  fallback_psw: "fallback_password"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.5.0
  on_boot:
    priority: -100
    then:
      - script.execute:
          id: play_sound
          priority: true
          sound_file: !lambda return id(boot);
      - light.turn_on:
          id: status_led
          red: 0%
          green: 70%
          blue: 90%
          brightness: 80%
          effect: Scan
      - wait_until: api.connected
      - delay: 1s
      - light.turn_off: status_led


esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf
    version: recommended
  flash_size: 16MB

psram:
  mode: octal
  speed: 80MHz

logger:

api:
  encryption:
    key: ${key_encryption}

ota:
  - platform: esphome
    password: ${ota_password}

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${friendly_name}-ap"
    password: "${fallback_psw}"

captive_portal:

button:
  - platform: restart
    name: "Restart"
    id: but_rest

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: ${i2s_lrclk_ws}
    i2s_bclk_pin: ${i2s_bclk_sck}

microphone:
  - platform: i2s_audio
    id: mic
    adc_type: external
    i2s_din_pin: ${mic}
    channel: left
    pdm: false
    bits_per_sample: 32bit

speaker:
  - platform: i2s_audio
    id: speakerid
    i2s_dout_pin: ${spk}
    dac_type: external
    channel: left
    bits_per_sample: 16bit
    buffer_duration: 80ms

media_player:
  - platform: speaker
    name: "Media player"
    id: media_playerid
    announcement_pipeline:
      speaker: speakerid
      format: WAV
    codec_support_enabled: false
    buffer_size: 6000
    volume_min: 0.5
    volume_increment: 0.25
    on_volume:
      then:
        - light.turn_on:
            id: status_led
            effect: "Volume Level Display"
        - delay: 1s
        - light.turn_off:
            id: status_led    
    files:
      - id: mute_switch_on_sound
        file: https://github.com/WarLion/wakeword-files/raw/refs/heads/main/mute_switch_on.wav
      - id: mute_switch_off_sound
        file: https://github.com/WarLion/wakeword-files/raw/refs/heads/main/mute_switch_off.wav     
      - id: timer_finished_wave_file
        file: https://github.com/WarLion/wakeword-files/raw/refs/heads/main/timer_finished.wav
      - id: boot
        file: https://github.com/WarLion/wakeword-files/raw/refs/heads/main/wake_word_triggered.wav
    on_announcement:
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
    on_idle:
      - script.execute: start_wake_word


voice_assistant:
  id: va
  micro_wake_word:
  microphone:
    microphone: mic
    channels: 0
    gain_factor: 4
  media_player: media_playerid
  noise_suppression_level: 2
  auto_gain: 31dBFS

  on_listening:
    - light.turn_on:
        id: status_led
        effect: "Scan"
        brightness: 95%
        red: 2%
        green: 13%
        blue: 100%  
  on_stt_vad_end:
    - light.turn_on:
        id: status_led
        blue: 100%
        red: 0%
        green: 0%
        effect: "Fast Pulse"
  on_tts_start:
    - light.turn_on:
        id: status_led
        blue: 0%
        red: 0%
        green: 90%
        brightness: 100%
        effect: "Scan"   
  on_end:
    # Handle the "nevermind" case where there is no announcement
    - light.turn_off: status_led
    - wait_until:
        condition:
          - media_player.is_announcing:
        timeout: 0.5s
    # Restart only mWW if enabled; streaming wake words automatically restart
    - if:
        condition:
          - lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - wait_until:
              - and:
                  - not:
                      voice_assistant.is_running:
                  - not:
                      speaker.is_playing:
          - lambda: id(va).set_use_wake_word(false);
          - micro_wake_word.start: 
  on_error:
    - light.turn_on:
        id: status_led
        red: 100%
        green: 0%
        blue: 0%
        effect: "Fast Pulse"
    - delay: 2s
  on_client_connected:
    - delay: 2s  # Give the api server time to settle
    - script.execute: start_wake_word
  on_client_disconnected:
    - script.execute: stop_wake_word
  on_timer_finished:
    - script.execute: stop_wake_word
    - wait_until:
        not:
          microphone.is_capturing:
    - switch.turn_on: timer_ringing
    - wait_until:
        - switch.is_off: timer_ringing
    - light.turn_on:
        id: status_led
        effect: Timer Alert
        red: 20%
        green: 60%
        blue: 20%
        brightness: 40%
    - delay: 2s 
    - light.turn_off: status_led   


binary_sensor:
  - platform: gpio
    pin:
      number: ${vol_up}
      mode: INPUT_PULLUP
      inverted: true
    id: vol_up
    on_multi_click:
    - timing:
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at least 0.2s
      then:
        - switch.toggle: mute
    - timing:
        - ON for at most 0.5s
        - OFF for at least 0.5s
      then:
      - if:
          condition:
            - switch.is_on: mute
          then:
            - switch.turn_off: mute
          else:   
            - if:
                condition: 
                  - switch.is_on: timer_ringing
                then:
                  - switch.turn_off: timer_ringing
                else:        
                  - delay: 30ms
                  - media_player.volume_up:
                  - delay: 30ms
  - platform: gpio
    pin:
      number: ${vol_down}
      mode: INPUT_PULLUP
      inverted: true
    id: vol_down
    on_multi_click:
    - timing:
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at least 0.2s
      then:
        - switch.toggle: mute
    - timing:
        - ON for at most 0.5s
        - OFF for at least 0.5s
      then:
      - if:
          condition:
            - switch.is_on: mute
          then:
            - switch.turn_off: mute
          else:         
            - if:
                condition: 
                  - switch.is_on: timer_ringing
                then:
                  - switch.turn_off: timer_ringing
                else:        
                  - delay: 30ms
                  - media_player.volume_down:
                  - delay: 30ms


light:
  - platform: esp32_rmt_led_strip
    id: status_led
    name: "Status LED"
    chipset: WS2812
    pin: ${ledpin}
    num_leds: ${numleds}
    rgb_order: GRB
    restore_mode: ALWAYS_OFF      
    effects:
        - pulse:
            name: "Slow Pulse"
            transition_length: 250ms
            update_interval: 250ms
            min_brightness: 50%
            max_brightness: 100%
        - pulse:
            name: "Fast Pulse"
            transition_length: 100ms
            update_interval: 100ms
            min_brightness: 50%
            max_brightness: 100%
        - addressable_scan:
            name: "Scan"
            move_interval: 50ms
            scan_width: 2
        - addressable_lambda:
            name: Volume Level Display
            update_interval: 500ms
            lambda: |-
              float volume = id(media_playerid).volume;
              int num_leds_on = round(volume * 4);
              for (int i = 0; i < it.size(); i++) {
                if (i < num_leds_on) {
                  it[i] = Color(0, 0, 255); // Blue
                } else {
                  it[i] = Color::BLACK;
                }
              }  
        - pulse:  # ❌ This is misaligned. It's outside the 'effects:' block.
            name: "Timer Alert"
            transition_length: 500ms
            update_interval: 500ms
            min_brightness: 50%
            max_brightness: 100%    

script:
  - id: start_wake_word
    then:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - micro_wake_word.start:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
  - id: stop_wake_word
    then:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - micro_wake_word.stop:
  - id: play_sound
    parameters:
      priority: bool
      sound_file: "audio::AudioFile*"
    then:
      - lambda: |-
          if (priority) {
            id(media_playerid)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_STOP)
              .set_announcement(true)
              .perform();
          }
          if ( (id(media_playerid).state != media_player::MediaPlayerState::MEDIA_PLAYER_STATE_ANNOUNCING ) || priority) {
            id(media_playerid)
              ->play_file(sound_file, true, false);
          }   

switch:
  - platform: template
    id: timer_ringing
    name: "Timer"
    optimistic: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      # Turn off the repeat mode and disable the pause between playlist items
      - lambda: |-
              id(media_playerid)
                ->make_call()
                .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
                .set_announcement(true)
                .perform();
              id(media_playerid)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      # Stop playing the alarm
      - media_player.stop:
          announcement: true
      - light.turn_on:
          id: status_led
          effect: Timer Alert
          red: 20%
          green: 60%
          blue: 20%
          brightness: 40%
      - delay: 2s 
      - light.turn_off: status_led          
    on_turn_on:
      - light.turn_on:
          id: status_led
          effect: Timer Alert
          red: 90%
          green: 0%
          blue: 20%
          brightness: 60%
      - voice_assistant.stop:
      - wait_until:
          not:
            microphone.is_capturing: 
      - lambda: |-
            id(media_playerid)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
              .set_announcement(true)
              .perform();
            id(media_playerid)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_wave_file
          announcement: true    
      - delay: 15min
      - switch.turn_off: timer_ringing

  - platform: template
    id: mute
    name: mute
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on: 
      - micro_wake_word.stop:
      - voice_assistant.stop:
      - light.turn_on:
          id: status_led           
          red: 100%
          green: 100%
          blue: 0%
          brightness: 60%
          effect: slow pulse 
    on_turn_off:
      - micro_wake_word.start:
      - light.turn_on:
          id: status_led           
          red: 0%
          green: 100%
          blue: 80%
          brightness: 60%
          effect: slow pulse 
      - delay: 2s
      - light.turn_off:
          id: status_led

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - if:
          condition:
            lambda: return x == "In Home Assistant";
          then:
            - micro_wake_word.stop:
            - delay: 500ms
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
      - if:
          condition:
            lambda: return x == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop:
            - delay: 500ms
            - micro_wake_word.start:

micro_wake_word:
  on_wake_word_detected:
    - voice_assistant.start:
        wake_word: !lambda return wake_word;
  vad:
  models:
    - model: okay_nabu
    - model: hey_mycroft
    - model: hey_jarvis